//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectGreen.Shaders.Sources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ShaderSources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShaderSources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProjectGreen.Shaders.Sources.ShaderSources", typeof(ShaderSources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec3 lightPosition;
        ///uniform vec3 lightColor;
        ///uniform vec3 lightAttenuation;
        ///
        ///uniform sampler2D colorMap;  
        ///uniform sampler2D normalMap; 
        ///
        ///varying vec2 worldCoords;
        ///varying vec2 textureCoords;
        ///varying vec3 lightVec;
        ///varying vec3 eyeVec;
        ///  
        ///void main()
        ///{   
        ///    // 1. Extract the normal from the normal map  
        ///    vec3 normal = normalize(texture2D(normalMap, textureCoords).rgb * 2.0 - 1.0); 
        ///      
        ///    // 2. Determine where the light is positioned 
        ///    vec3 lightVecNorm = normalize(ligh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string frag_bumped_dynamic_light {
            get {
                return ResourceManager.GetString("frag_bumped_dynamic_light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 lightPosition;
        ///uniform vec3 lightColor;
        ///uniform vec3 lightAttenuation;
        ///
        ///uniform sampler2D colorMap;
        ///
        ///varying vec2 worldCoords;
        ///varying vec2 textureCoords;
        ///
        ///void main()
        ///{
        ///	vec2 aux = lightPosition - worldCoords;
        ///	float distance = length(aux);
        ///	float attenuation = 1.0 / (lightAttenuation.x + lightAttenuation.y * distance + lightAttenuation.z * distance * distance);	
        ///	vec4 color = vec4(attenuation, attenuation, attenuation, 1.0) * vec4(lightColor, 1.0);	
        ///	gl_FragColor = color * text [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string frag_dynamic_light {
            get {
                return ResourceManager.GetString("frag_dynamic_light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D colorMap;
        ///uniform float totalTime;
        ///uniform float noiseStr;
        ///
        ///varying vec2 textureCoords;
        ///varying vec4 colorData;
        ///
        ///float rand(vec2 co)
        ///{ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }
        ///
        ///void main()
        ///{
        ///    float r = rand(gl_FragCoord.xy * sin(totalTime    )) - 0.5;
        ///    float g = rand(gl_FragCoord.xy * sin(totalTime * 2)) - 0.5;
        ///    float b = rand(gl_FragCoord.xy * sin(totalTime * 3)) - 0.5;
        ///    
        ///    vec4 noise = vec4(r, g, b, 0) * noiseStr;
        ///	gl_FragColor =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string frag_noised_textured {
            get {
                return ResourceManager.GetString("frag_noised_textured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D colorMap;
        ///
        ///varying vec2 textureCoords;
        ///varying vec4 colorData;
        ///
        ///void main()
        ///{
        ///	gl_FragColor = texture(colorMap, textureCoords.xy) * colorData;
        ///}.
        /// </summary>
        internal static string frag_textured {
            get {
                return ResourceManager.GetString("frag_textured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 camPosition;
        ///uniform vec2 camSize;
        ///uniform vec3 lightPosition;
        ///// uniform float cameraHeight;
        ///
        ///varying vec2 textureCoords;
        ///varying vec3 eyeVec;
        ///varying vec3 lightVec;
        ///varying vec2 worldCoords;
        ///varying vec4 colorData;
        ///
        ///void main() 
        ///{  
        ///    textureCoords = gl_MultiTexCoord0.xy;
        ///    colorData = gl_Color;
        ///
        ///    eyeVec = vec3(camPosition, 5) - gl_Vertex.xyz;
        ///    lightVec = lightPosition - gl_Vertex.xyz;
        ///    
        ///    vec2 camView = camSize / vec2(2, 2);
        ///	worldCoords = gl_Vertex.xy;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vert_bumped_dynamic_light {
            get {
                return ResourceManager.GetString("vert_bumped_dynamic_light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 camPosition;
        ///uniform vec2 camSize;
        ///
        ///varying vec2 textureCoords;
        ///varying vec4 colorData;
        ///
        ///void main()
        ///{
        ///    colorData = gl_Color;
        ///    vec2 camView = camSize / vec2(2, 2);
        ///	textureCoords = gl_MultiTexCoord0.xy;
        ///    vec2 position = gl_Vertex.xy;
        ///    position -= camPosition;
        ///    position /= camView;
        ///    gl_Position = vec4(position, 0.0, 1.0);
        ///}.
        /// </summary>
        internal static string vert_camera2d {
            get {
                return ResourceManager.GetString("vert_camera2d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 camPosition;
        ///uniform vec2 camSize;
        ///
        ///varying vec2 worldCoords;
        ///varying vec2 textureCoords;
        ///varying vec4 colorData;
        ///
        ///void main()
        ///{
        ///    textureCoords = gl_MultiTexCoord0.xy;
        ///    colorData = gl_Color;
        ///    vec2 camView = camSize / vec2(2, 2);
        ///	worldCoords = gl_Vertex.xy;
        ///    vec2 position = gl_Vertex.xy;
        ///    position -= camPosition;
        ///    position /= camView;
        ///    gl_Position = vec4(position, 0.0, 1.0);
        ///}.
        /// </summary>
        internal static string vert_dynamic_light {
            get {
                return ResourceManager.GetString("vert_dynamic_light", resourceCulture);
            }
        }
    }
}
